/**
 * nqueens
 * @author Deepson Shrestha
 * @version 21 November 2019
 */
#include <cassert>
#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <vector>
#include <bits/stdc++.h>
#include <stdio.h>
#include "matrix.h"
using namespace std;

bool ok(const Matrix<bool>& board);
void hr(unsigned cols);
void printBoard(const Matrix<bool>& board);
void r_backtrack(unsigned k, Matrix<bool>& board);
vector<unsigned> heuristic(vector<unsigned> permutation, unsigned n);
unsigned collisions(vector<unsigned> vec, unsigned size);

/**
 * set up the board and start the backtracking algorithm at the
 * top of the search tree
 */
int main(int argc, char* argv[])
{
  if (argc != 2)
  {
    cout << "Usage: " << argv[0] << " n" << endl;
    cout << "       where n is the number of queens to place" << endl;
    cout << "       on an n x n chessboard, with 4 <= n < 26" << endl;
    exit(2);
  }

  unsigned n = static_cast<unsigned>(stoul(argv[1]));
  assert(n > 3 && n < 26);

  vector<unsigned> myvector;

  //set some values:
  for (unsigned i = 1; i <= n; ++i)
  {
    myvector.push_back(i);
  }

  vector<unsigned> printable = heuristic(myvector, n);

    // initialize a board with no queens
  Matrix<bool> board(n, n);
  for (unsigned row = 0; row < n; row++)
  {
    for (unsigned col = 0; col < n; col++)
    {
      board.at(row, col) = false;
    }
  }

  for(unsigned i = 0; i < n; i++)
  {
    board.at(i, printable.at(i)-1) = true;
  }

  /////////////////////////////////////////////////
  
  // start with column 0
  /*r_backtrack(0, board);
  cout << "No solution" << endl;
  exit(1);*/
  printBoard(board);
  return 0;
}

vector<unsigned> heuristic(const vector<unsigned> permutation, unsigned vsize)
{ 
  srand(static_cast<unsigned>(time(nullptr)));
  //using built-in random generator:
  vector<unsigned> p = permutation;

  unsigned print_swaps = 0;
  unsigned print_comparisons = 0;
  unsigned print_resets = 0;
  
  do
  { 
    random_shuffle (p.begin(), p.end()); 
    print_resets++;
    unsigned swaps = 0;
    do
    {
      swaps = 0;
      for(unsigned i = 0; i < vsize; i++)
      {
        for(unsigned j = 0; j < vsize; j++)
        {
          vector<unsigned> dummyvector = p;
          swap(dummyvector[i], dummyvector[j]);
          print_comparisons++;
          if (collisions(dummyvector, vsize) < collisions(p, vsize))
          {
            p = dummyvector;
            swaps++;
            print_swaps++;
          }
        }
      }
    } while (swaps > 0);
  } while (collisions(p, vsize) > 0);
 
  cout << "Performed " << print_resets << " resets, " << print_swaps
       << " swaps, and " << print_comparisons << " comparisons" << endl;

       cout << "The vector elements are: " << endl ;
       for(unsigned i = 0; i < vsize; i++)
         cout << p.at(i) << ' ';

       return p;     
}

unsigned collisions(vector<unsigned> v, unsigned vecSize)
{
  unsigned collisions = 0;
  unsigned n = vecSize;

  unordered_map<unsigned, unsigned> mpNegDiagonal;
  unordered_map<unsigned, unsigned> mpPosDiagonal;

  for(unsigned i = 0; i < n; i++)
  {
    mpNegDiagonal[v.at(i) + i]++;
    mpPosDiagonal[v.at(i) - i]++;
  }

  for (auto x : mpNegDiagonal)
  {
    collisions += (x.second * (x.second - 1) / 2);
  }

  for (auto x : mpPosDiagonal)
  {
    collisions += (x.second * (x.second - 1) / 2);
  }

  return collisions;
}      

/**
 * a simple procedure to output an ASCII art horizontal line with plus
 * signs where columns will intersect
 */
void hr(unsigned cols)
{
  cout << "    +";
  for (unsigned col = 0; col < cols; col++)
  {
    cout << "---+";
  }
  cout << endl;
}

/**
 * this function dumps the board to std output
 * @param board the board whose arrangement to dump
 */
void printBoard(const Matrix< bool>& board)
{
  hr(static_cast<unsigned>(board.numrows()));
  for (unsigned row = 0; row < board.numrows(); row++)
  {
    cout << ' ' << setw(2) << board.numrows() - row << " |";
    for (unsigned col = 0; col < board.numrows(); col++)
    {
      if (board.at(row, col))
      {
        cout << " X |";
      }
      else
      {
        cout << "   |";
      }
    }
    cout << endl;
    hr(static_cast<unsigned>(board.numrows()));
  }

  cout << "     ";
  for (unsigned col = 0; col < board.numrows(); col++)
  {
    cout << ' ' << static_cast<char>('a' + col) << "  ";
  }
  cout << endl;
}



