/**
 * nqueens
 * @author Jon Beck
 * @version 21 November 2019
 */
#include <cassert>
#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <vector>
#include <bits/stdc++.h>
#include <stdio.h>
#include "matrix.h"
using namespace std;

bool ok(const Matrix<bool>& board);
void hr(unsigned cols);
void printBoard(const Matrix<bool>& board);
void r_backtrack(unsigned k, Matrix<bool>& board);
void heuristic(vector<int> permutation, int n);
int collisions(vector<int> vec);

/**
 * set up the board and start the backtracking algorithm at the
 * top of the search tree
 */
int main(int argc, char* argv[])
{
  if (argc != 2)
  {
    cout << "Usage: " << argv[0] << " n" << endl;
    cout << "       where n is the number of queens to place" << endl;
    cout << "       on an n x n chessboard, with 4 <= n < 26" << endl;
    exit(2);
  }

  int n = static_cast<int>(stoul(argv[1]));
  assert(n > 3 && n < 26);

  // initialize a board with no queens
  /*Matrix<bool> board(n, n);
  for (unsigned row = 0; row < n; row++)
  {
    for (unsigned col = 0; col < n; col++)
    {
      board.at(row, col) = false;
    }
    }*/

  vector<int> myvector;

  //set some values:
  for (int i = 1; i <= n; ++i)
  {
    myvector.push_back(i);
  }

  heuristic(myvector, n);

  /////////////////////////////////////////////////
  
  // start with column 0
  /*r_backtrack(0, board);
  cout << "No solution" << endl;
  exit(1);*/
  return 0;
}

void heuristic(const vector<int> permutation, int vsize)
{ 
  srand(static_cast<unsigned>(time(nullptr)));
  //using built-in random generator:
  vector<int> p = permutation;

  unsigned print_swaps = 0;
  unsigned print_comparisons = 0;
  unsigned print_resets = 0;

  int myvector_collisions = 0;

  
  do
  { 
    random_shuffle (p.begin(), p.end()); 
    print_resets++;
    unsigned swaps = 0;
    do
    {
      swaps = 0;
      for(int i = 0; i < vsize; i++)
      {
        for(int j = 0; j < vsize; j++)
        {
          vector<int> dummyvector = p;
          swap(dummyvector[i], dummyvector[j]);
          print_comparisons++;
          if (collisions(dummyvector) < collisions(p))
          {
            p = dummyvector;
            swaps++;
            print_swaps++;
          }
        }
      }
    } while (swaps > 0);
    //cout << "collisions-:- " << collisions << endl << flush;
  } while (collisions(p) > 0);
  //cout << "collisions-:- " << collisions << endl << flush;
 
  cout << "Performed " << print_resets << " resets, " << print_swaps
       << " swaps, and " << print_comparisons << " comparisons" << endl;

       cout << "The vector elements are: " << endl ;
       for(int i = 0; i < vsize; i++)
         cout << p.at(i) << ' ';
}

int collisions(vector<int> v)
{
  int collisions = 0;
  int n = v.size();

  unordered_map<int, int> mpNegDiagonal;
  unordered_map<int, int> mpPosDiagonal;

  for(int i = 0; i < n; i++)
  {
    mpNegDiagonal[v.at(i) + i]++;
    mpPosDiagonal[v.at(i) - i]++;
  }

  for (auto x : mpNegDiagonal)
  {
    collisions += (x.second * (x.second - 1) / 2);
  }

  for (auto x : mpPosDiagonal)
  {
    collisions += (x.second * (x.second - 1) / 2);
  }

  return collisions;
}
        

/**
 * This function checks to see if the current placement of queens on
 * the board is ok.  It is ok if no queen attacks another queen.  A
 * return of true means no conflict.  A return of false means at least
 * two queens conflict.  This function is designed for clarity, NOT
 * efficiency.  This function can be vastly improved.
 * @param board the n x n chessboard
 * @return the absence of a conflict with this board arrangement
 */
bool ok(const Matrix<bool>& board)
{
  unsigned n {static_cast<unsigned>(board.numrows())};
  bool conflict = false;

  // let row and col range over the entire board
  for (unsigned row = 0; row < n; row++)
  {
    for (unsigned col = 0; col < n; col++)
    {
      // if row and col designate a queen's position, see if it
      // conflicts with any other queen

      // let tryrow and trycol range over the entire board, looking
      // for a conflicting queen
      for (unsigned tryrow = 0; tryrow < n; tryrow++)
      {
        for (unsigned trycol = 0; trycol < n; trycol++)
        {
          // if there's a queen at both row,col and tryrow,trycol
          if (board.at(row, col) && board.at(tryrow, trycol) &&
              // and it's not the same spot
              !(row == tryrow && col == trycol))
          {
            // see if they're in the same row
            if (row == tryrow)
            {
              conflict = true;
            }
            // see if they're in the same "up" diagonal
            if (n - col + row == n - trycol + tryrow)
            {
              conflict = true;
            }
            // or in the same down diag
            if (row + col + 1 == tryrow + trycol + 1)
            {
              conflict = true;
            }
          }
        }
      }
    }
  }
  return !conflict;
}

/**
 * a simple procedure to output an ASCII art horizontal line with plus
 * signs where columns will intersect
 */
void hr(unsigned cols)
{
  cout << "    +";
  for (unsigned col = 0; col < cols; col++)
  {
    cout << "---+";
  }
  cout << endl;
}

/**
 * this function dumps the board to std output
 * @param board the board whose arrangement to dump
 */
void printBoard(const Matrix< bool>& board)
{
  hr(static_cast<unsigned>(board.numrows()));
  for (unsigned row = 0; row < board.numrows(); row++)
  {
    cout << ' ' << setw(2) << board.numrows() - row << " |";
    for (unsigned col = 0; col < board.numrows(); col++)
    {
      if (board.at(row, col))
      {
        cout << " X |";
      }
      else
      {
        cout << "   |";
      }
    }
    cout << endl;
    hr(static_cast<unsigned>(board.numrows()));
  }

  cout << "     ";
  for (unsigned col = 0; col < board.numrows(); col++)
  {
    cout << ' ' << static_cast<char>('a' + col) << "  ";
  }
  cout << endl;
}

/**
 * This is the recursive backtracking function. When called, k queens
 * have already been placed on the board in columns 0 .. k-1.  We're
 * trying to place the next queen in column k.
 * @param k the column in which to place the current queen
 * @param board the board on which to place the queen
 */
void r_backtrack(unsigned k, Matrix<bool>& board)
{
  // are we done?
  if (k == board.numrows())
  {
    // if so, report and exit
    printBoard(board);
    exit(0);
  }

  // try each row in turn, for this column
  for (unsigned row = 0; row < board.numrows(); row++)
  {
    // put a queen here
    board.at(row, k) = true;

    // did that cause a conflict?
    if (ok(board))
    {
      // keep going
      r_backtrack(k + 1, board);
    }
    // if that didn't work, un-try the current attempt
    board.at(row, k) = false;
  }
}

